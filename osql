#!/usr/bin/python
import argparse
from getpass import getuser
import json
import os
import readline  # not to be confused with the builtin
import sys
import time

try:
    sys.path.append("/home/josephbylund/.local/share/virtualenvs/app-I2jH_kpr/lib/python2.7/site-packages")
    import kensho_pyorient as pyorient
except ImportError as oops:
    print >> sys.stderr, "WARNING: importing upstream pyorient, this will cause a socketerror on some query exceptions."
    print >> sys.stderr, oops
    import pyorient


def toserial(obj):
    try:
        json.dumps(obj)
        return obj
    except:
        return str(obj)


class CLI(object):
    def __init__(self, **kwargs):
        for key, val in kwargs.iteritems():
            setattr(self, key, val)
        self.client = None
        self.session_id = None
        self.cmdno = 0
        self.timing = False
        self.tablenames = None
        self._connect()
        readline.set_completer(self._completion)
        readline.parse_and_bind('tab: complete')

    def _completion(self, needle, state):
        current_text = readline.get_line_buffer()
        needle = needle.upper()
        current_words = current_text.lower().split()
        if (
            (    current_text.endswith(' ') and 'from' in current_words[-1:]) or #
            (not current_text.endswith(' ') and 'from' in current_words[-2:-1])
        ):
            matches = [
                tablename
                for tablename in self._get_tablenames()
                if tablename.upper().startswith(needle)
            ]
        else:
            keywords = [
                "CREATE",
                "DELETE",
                "EOF",
                "FETCHPLAN",
                "FROM",
                "GROUP",
                "INCREMENT",
                "INSERT",
                "LET",
                "LIMIT",
                "LOCK",
                "NOCACHE",
                "OFFSET",
                "ORDER",
                "PARALLEL",
                "PUT",
                "REMOVE",
                "RETURN",
                "SELECT",
                "SET",
                "SKIP2",
                "TIMEOUT",
                "UNWIND",
                "UPDATE",
                "WHERE",
            ]
            matches = [x for x in keywords if x.startswith(needle)]
        try:
            return matches[state] + " "
        except IndexError:
            return  # non-string return value means we're done

    def _connect(self):
        self.cmdno = 0
        try:
            self.client = pyorient.OrientDB(self.host, self.port)
        except:
            raise Exception(
                'Could not connect to {}:{} is the server running & listening on that port?'
            )
        try:
            self.session_id = self.client.connect(self.username, self.password)
        except:
            raise Exception('Could not connect as user, check credentials.')
        try:
            self.client.db_open(
                self.dbname,
                self.username,
                self.password
            )
        except:
            raise Exception('Could not open database, check database and credentials.')

    def _read(self):
        self.cmdno += 1
        pieces = []
        while not pieces or not pieces[-1].endswith(';'):
            nprompt = "In [{}]: ".format(self.cmdno)
            cprompt = "...: ".rjust(len(nprompt))
            if not pieces:
                prompt = nprompt
            else:
                prompt = cprompt
            pieces.append(raw_input(prompt).strip())
            if pieces[0].startswith('\\'):
                break
        return " ".join(pieces)

    def _eval(self, cmd):
        res = self.client.command(cmd)
        try:
            return [row.oRecordData for row in res]
        except:
            # in the case of deletes... I guess you get this
            return [None for _ in xrange(res[0])]

    def _print(self, res, duration=0):
        if res is not None:
            print json.dumps(res, indent=4, sort_keys=True, default=toserial)
            print "({} row{})".format(
                len(res),
                "" if 1 == len(res) else "s"
            )
        if self.timing:
            print "\nTime: {} ms".format(round(1000 * duration, 3))
        print

    class UnkownMetaCommand(Exception):
        pass

    def _get_tablenames(self):
        if self.tablenames is None:
            self.tablenames = sorted(
                row.oRecordData['name'] for row in
                self.client.command('select from (select expand(classes) from metadata:schema)')
            )
        return self.tablenames

    def _special_cmd(self, cmd):
        cmd = cmd.lstrip('\\')
        if cmd == 'dt':
            return [
                row.oRecordData for row in
                self.client.command('select from (select expand(classes) from metadata:schema)')
            ]
        elif cmd == 'timing':
            self.timing = not(self.timing) # it's a toggle
        else:
            raise self.UnkownMetaCommand('Unknown meta command!')

    def repl(self):
        """read / eval / print"""
        while True:
            try:
                cmd = self._read()
                begin = time.time()
                if not cmd:
                    res = None
                elif cmd[0] == '\\':
                    res = self._special_cmd(cmd)
                else:
                    res = self._eval(cmd)
                end = time.time()
                self._print(res, duration=end-begin)
            except self.UnkownMetaCommand:
                print "Unkown meta command '{}'.".format(cmd)
                print
            except (pyorient.exceptions.PyOrientSQLParsingException, pyorient.exceptions.PyOrientCommandException) as oops:
                print oops
                print
            except (KeyboardInterrupt, EOFError):
                print
                print
                break


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--dbname', default=os.environ.get('ODBDBNAME') or getuser())
    parser.add_argument('--username', default=os.environ.get('ODBUSER') or getuser())
    parser.add_argument('--host', default=os.environ.get('ODBHOST') or 'localhost')
    default_port = 2424
    if os.environ.get('ODBPORT'):
        default_port = int(os.environ.get('ODBPORT'))
    parser.add_argument('--port', type=int, default=default_port)
    parser.add_argument('--password', default=os.environ.get('ODBPASSWORD'))
    return vars(parser.parse_args())


def main():
    args = get_args()
    CLI(**args).repl()


if "__main__" == __name__:
    main()
